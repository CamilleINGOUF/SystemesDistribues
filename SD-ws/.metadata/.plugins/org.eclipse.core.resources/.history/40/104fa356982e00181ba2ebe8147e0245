package chat.impl;

import java.io.PrintWriter;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import org.omg.CORBA.ORB;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAHelper;

import chat.ChatChannel;
import chat.ChatClient;
import chat.ChatServerPOA;
import chat.Message;

public class Server extends ChatServerPOA {

	private ArrayList<ChatClient> clients;
	
	private HashMap<ChatClient,String> clientsChannels;

	public Server(String[] args)
	{
		try{
			clients = new ArrayList<>();
			clientsChannels = new HashMap<>();

			ORB orb = ORB.init(args, null);
			POA rootPOA = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));

			System.out.println(InetAddress.getLocalHost().getHostName());

			byte[] id = rootPOA.activate_object(this);
			org.omg.CORBA.Object ref = rootPOA.id_to_reference(id);

			String ior = orb.object_to_string(ref);
			System.out.println(ior);

			PrintWriter writer = new PrintWriter("server_ior.txt");
			writer.print(ior);
			writer.close();

			rootPOA.the_POAManager().activate();
			orb.run();
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
	}

	@Override
	public void register(ChatClient client) 
	{
		clients.add(client);
		updateClients();
	}

	@Override
	public void remove(ChatClient client) 
	{
		clients.remove(client);
		if(!clients.isEmpty())
			updateClients();
	}

	private void updateClients()
	{
		ChatClient[] str = new ChatClient[clients.size()];
		for(ChatClient c : clients)
			c.updateClientList(clients.toArray(str));
	}

	@Override
	public void sendMessage(Message message) 
	{
		if(message.isForAll())
		{
			for (Map.Entry<ChatClient, String> entry : clientsChannels.entrySet()) 
			{
				if(entry.getValue().equals(clientsChannels.get(message.getSender())))
				{
					entry.getKey().printMessage(message);
				}
			}
		}
		else
		{
			ArrayList<ChatClient> clis = new ArrayList<>(Arrays.asList(message.getTargets()));
			for(ChatClient c : clients)
			{
				if(clis.contains(c) || c.equals(message.getSender()))
				{
					c.printMessage(message);
				}
			}
		}
	}

	@Override
	public void createChannel(ChatClient client, String name) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void joinChannel(ChatClient client, ChatChannel channel) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String[] getChannels() {
		ArrayList<String> chans = new ArrayList<>();
		for (String s : clientsChannels.values()) {
			if(!chans.contains(s))
				chans.add(s);
		}
		String[] str = new String[clientsChannels.values().size()];
		return clientsChannels.values().toArray(str);
	}

	@Override
	public void registerChannel(ChatClient client, String channel) 
	{
		clientsChannels.put(client,channel);
		clients.add(client);
		updateClients();
	}

	public static void main(String[] args) {
		new Server(args);
	}
}
